{"version":3,"sources":["InputFields.tsx","CertificateData.tsx","App.tsx","serviceWorker.js","index.js"],"names":["InputFields","handleChange","event","obj","target","id","value","_this","props","onChange","_this2","this","inputElements","Object","entries","inputs","map","entry","index","react_default","a","createElement","key","htmlFor","descriptions","type","legend","React","Component","CertificateData","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","click_index","input_error","state","header","error","domains","length","Promise","resolve","urlParams","d","concat","options","o","join","url","fetch","then","res","json","catch","err","console","setState","message","values","some","p","match","msgDiv","invalid_domains","rows","cols","readOnly","fetchHeaderForDomains","msg","className","App","domain_input","domain","valid_domains","array_name","length_name","guard_name","submit_count","preventDefault","input","assign","split","s","trim","filter","validateDomain","onSubmit","bind","InputFields_InputFields","onDomainChange","onOptionsChange","CertificateData_CertificateData","exec","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.328c4fbb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport interface IInputFieldsProps {\r\n    inputs: { [label: string]: string };\r\n    descriptions: string[];\r\n    legend?: string;\r\n    onChange: (input: { [label: string]: string }) => void;\r\n}\r\n\r\nexport default class InputFields extends React.Component<IInputFieldsProps> {\r\n\r\n    private handleChange = ((event: React.ChangeEvent<HTMLInputElement>) => {\r\n        // return an object containing the label and new value to the callback\r\n        let obj: { [label: string]: string } = {};\r\n        obj[event.target.id] = event.target.value;\r\n        this.props.onChange(obj);\r\n    });\r\n\r\n    render() {\r\n        const inputElements = Object.entries(this.props.inputs).map((entry, index) => \r\n            <div key={entry[0]}>\r\n                <label htmlFor={entry[0]}>{this.props.descriptions[index] || entry[0]}</label>\r\n                <input id={entry[0]} type=\"text\" value={entry[1]} onChange={this.handleChange}></input>\r\n            </div>\r\n        );\r\n\r\n        if (!this.props.legend) return (\r\n          <div>\r\n            {inputElements}\r\n          </div>\r\n        );\r\n\r\n        else return (\r\n            <fieldset>\r\n                <legend>{this.props.legend}</legend>\r\n                {inputElements}\r\n            </fieldset>\r\n        );\r\n     }\r\n}","import React from \"react\";\r\nimport { ISSLHelperOpts, ISSLHelperOut } from './App';\r\n\r\nexport interface ICertificateProps {\r\n    domains: string[];\r\n    options: ISSLHelperOpts;\r\n    click_index: number;\r\n}\r\n\r\nexport interface ICertificateState {\r\n    header: ISSLHelperOut | null;\r\n    error?: string | null;\r\n};\r\n\r\nexport default class CertificateData extends React.Component<ICertificateProps, ICertificateState> {\r\n    private click_index: number;\r\n    private input_error: string | null;\r\n\r\n    constructor(props: ICertificateProps) {\r\n        super(props);\r\n        this.state = {\r\n            header: null,\r\n            error: null,\r\n        };\r\n        this.click_index = this.props.click_index;\r\n        this.input_error = null;\r\n    }\r\n\r\n    private fetchHeaderForDomains(): Promise<void> {\r\n        // if there aren't any domains, return an error\r\n        if (this.props.domains.length <= 0) return Promise.resolve();\r\n        // calculate the url parameters by adding the domain options to the header options\r\n        // should create ?domain=...&domain=...&array_name=... and so on\r\n        const urlParams = this.props.domains.map((d) => `domain=${d}`).concat(Object.entries(this.props.options).map((o) => `${o[0]}=${o[1]}`)).join('&');\r\n        const url = `https://certutil.prototypical.pro/getheader?${urlParams}`;\r\n        // fetch the stuff from the url, returning null on error\r\n        return fetch(url).then((res) => res.json()).catch((err) => {\r\n            console.error(err);\r\n            this.setState({\r\n                header: null,\r\n                error: err.message,\r\n            });\r\n        }).then((header) => {\r\n            this.setState({\r\n                header,\r\n                error: null\r\n            });\r\n        });\r\n    }\r\n\r\n    private static msgDiv(msg: string) {\r\n        return (\r\n            <div> \r\n                <p className=\"msg\">{msg}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // if we need to get a new certificate\r\n        if (this.props.click_index !== this.click_index) {\r\n            // update index\r\n            this.click_index = this.props.click_index;\r\n            // error check\r\n            this.input_error = null;\r\n            if (!this.props.domains || this.props.domains.length === 0) this.input_error = \"Please add at least one valid domain!\";\r\n            if (!this.props.options || Object.values(this.props.options).some((p) => !p)) this.input_error = \"Please input non-emptey header options.\";\r\n            if (Object.values(this.props.options).some((p: string) => !!p.match(/\\s|-/))) this.input_error = \"Varible names cannot contain dashes or spaces.\"\r\n\r\n            if (!this.input_error) {\r\n                // render the certificate!\r\n                this.fetchHeaderForDomains();\r\n                return CertificateData.msgDiv(\"Generating header...\");\r\n            }\r\n        }\r\n        if (this.input_error) return CertificateData.msgDiv(this.input_error);\r\n        if (this.state.error) return CertificateData.msgDiv(`Error: ${this.state.error}`);\r\n        if (this.state.header) return (\r\n          <div>\r\n              <p>{this.state.header.invalid_domains.length > 0 ? `Invalid Domains: ${this.state.header.invalid_domains.join(\", \")}` : null}<br></br></p>\r\n              <textarea rows={(this.state.header.header.match(/\\n/g) || '').length + 5} cols={80} readOnly={true} value={this.state.header.header}></textarea>\r\n          </div>  \r\n        );\r\n        return CertificateData.msgDiv(\"Please add some domains, and click submit!\");\r\n    }\r\n}","import React, { SyntheticEvent } from 'react';\nimport InputFields from './InputFields';\nimport CertificateData from './CertificateData';\nimport './App.css';\n\nexport interface ISSLHelperOut {\n  header: string;\n  valid_domains: string[];\n  invalid_domains: string[];\n}\n\nexport interface ISSLHelperOpts {\n  array_name?: string;\n  length_name?: string;\n  guard_name?: string;\n}\n\ninterface IAppState {\n  domain_input: {\n    domain: string;\n  };\n  valid_domains: string[];\n  options: ISSLHelperOpts;\n  submit_count: number;\n}\n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      domain_input: {\n        domain: \"www.google.com, www.amazon.com\",\n      },\n      valid_domains: [\"www.google.com\", \"www.amazon.com\"],\n      options: {\n        array_name: \"TAs\",\n        length_name: \"TAs_NUM\",\n        guard_name: \"CERTIFICATES\",\n      },\n      submit_count: 0,\n    };\n  }\n\n  private static validateDomain(domain: string): boolean {\n    const regex = /^((?:(?:(?:\\w[.\\-+]?)*)\\w)+)((?:(?:(?:\\w[.\\-+]?){0,62})\\w)+)\\.(\\w{2,6})$/;\n    return domain.length > 0 && domain.length <= 255 && !!regex.exec(domain);\n  }\n\n  private onSubmit(event: SyntheticEvent) {\n    this.setState((state) => { return { submit_count: state.submit_count + 1 } });\n    event.preventDefault();\n  }\n\n  private onOptionsChange(input: { [label: string]: string }) {\n    this.setState({ options: Object.assign({}, this.state.options, input) });\n  }\n\n  private onDomainChange(input: { [label: string]: string }) {\n    this.setState({\n      domain_input: input as { domain: string },\n      valid_domains: input.domain.split(\",\").map((s) => s.trim()).filter((d) => App.validateDomain(d)),\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.onSubmit.bind(this)}>\n          <InputFields inputs={this.state.domain_input as any} descriptions={[\"Domains To Include\"]} onChange={this.onDomainChange.bind(this)}></InputFields>\n          <InputFields legend=\"Header Customization Options\" inputs={this.state.options as any} descriptions={[\n            \"Name For Trust Anchor Array Varible\",\n            \"Name For Array Length Varible\",\n            \"Name For The Header Guard (Usually Caps)\",\n          ]} onChange={this.onOptionsChange.bind(this)}></InputFields>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p>{`Domains: ${this.state.valid_domains.join(\", \")}`}</p>\n        <CertificateData click_index={this.state.submit_count} domains={this.state.valid_domains} options={this.state.options}></CertificateData>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}