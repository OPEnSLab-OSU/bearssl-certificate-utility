{"version":3,"sources":["InputFields.tsx","CertificateData.tsx","App.tsx","serviceWorker.js","index.js"],"names":["InputFields","handleChange","event","obj","target","id","value","props","onChange","inputElements","Object","entries","this","inputs","map","entry","index","key","htmlFor","descriptions","type","legend","React","Component","CertificateData","click_index","input_error","state","header","error","domains","length","Promise","resolve","urlParams","d","concat","options","o","join","url","fetch","then","res","json","catch","err","console","setState","message","values","some","p","match","msgDiv","invalid_domains","rows","cols","readOnly","fetchHeaderForDomains","msg","className","App","domain_input","domain","valid_domains","array_name","length_name","guard_name","submit_count","preventDefault","input","assign","split","s","trim","filter","validateDomain","onSubmit","bind","onDomainChange","onOptionsChange","exec","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.728d4f8f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface IInputFieldsProps {\n    inputs: { [label: string]: string };\n    descriptions: string[];\n    legend?: string;\n    onChange: (input: { [label: string]: string }) => void;\n}\n\nexport default class InputFields extends React.Component<IInputFieldsProps> {\n\n    private handleChange = ((event: React.ChangeEvent<HTMLInputElement>) => {\n        // return an object containing the label and new value to the callback\n        let obj: { [label: string]: string } = {};\n        obj[event.target.id] = event.target.value;\n        this.props.onChange(obj);\n    });\n\n    render() {\n        const inputElements = Object.entries(this.props.inputs).map((entry, index) => \n            <div key={entry[0]}>\n                <label htmlFor={entry[0]}>{this.props.descriptions[index] || entry[0]}</label>\n                <input id={entry[0]} type=\"text\" value={entry[1]} onChange={this.handleChange}></input>\n            </div>\n        );\n\n        if (!this.props.legend) return (\n          <div>\n            {inputElements}\n          </div>\n        );\n\n        else return (\n            <fieldset>\n                <legend>{this.props.legend}</legend>\n                {inputElements}\n            </fieldset>\n        );\n     }\n}","import React from \"react\";\nimport { ISSLHelperOpts, ISSLHelperOut } from './App';\n\nexport interface ICertificateProps {\n    domains: string[];\n    options: ISSLHelperOpts;\n    click_index: number;\n}\n\nexport interface ICertificateState {\n    header: ISSLHelperOut | null;\n    error?: string | null;\n};\n\nexport default class CertificateData extends React.Component<ICertificateProps, ICertificateState> {\n    private click_index: number;\n    private input_error: string | null;\n\n    constructor(props: ICertificateProps) {\n        super(props);\n        this.state = {\n            header: null,\n            error: null,\n        };\n        this.click_index = this.props.click_index;\n        this.input_error = null;\n    }\n\n    private fetchHeaderForDomains(): Promise<void> {\n        // if there aren't any domains, return an error\n        if (this.props.domains.length <= 0) return Promise.resolve();\n        // calculate the url parameters by adding the domain options to the header options\n        // should create ?domain=...&domain=...&array_name=... and so on\n        const urlParams = this.props.domains.map((d) => `domain=${d}`).concat(Object.entries(this.props.options).map((o) => `${o[0]}=${o[1]}`)).join('&');\n        const url = `https://certutil.prototypical.pro/getheader?${urlParams}`;\n        // fetch the stuff from the url, returning null on error\n        return fetch(url).then((res) => res.json()).catch((err) => {\n            console.error(err);\n            this.setState({\n                header: null,\n                error: err.message,\n            });\n        }).then((header) => {\n            this.setState({\n                header,\n                error: null\n            });\n        });\n    }\n\n    private static msgDiv(msg: string) {\n        return (\n            <div> \n                <p className=\"msg\">{msg}</p>\n            </div>\n        );\n    }\n\n    render() {\n        // if we need to get a new certificate\n        if (this.props.click_index !== this.click_index) {\n            // update index\n            this.click_index = this.props.click_index;\n            // error check\n            this.input_error = null;\n            if (!this.props.domains || this.props.domains.length === 0) this.input_error = \"Please add at least one valid domain!\";\n            if (!this.props.options || Object.values(this.props.options).some((p) => !p)) this.input_error = \"Please input non-emptey header options.\";\n            if (Object.values(this.props.options).some((p: string) => !!p.match(/\\s|-/))) this.input_error = \"Varible names cannot contain dashes or spaces.\"\n\n            if (!this.input_error) {\n                // render the certificate!\n                this.fetchHeaderForDomains();\n                return CertificateData.msgDiv(\"Generating header...\");\n            }\n        }\n        if (this.input_error) return CertificateData.msgDiv(this.input_error);\n        if (this.state.error) return CertificateData.msgDiv(`Error: ${this.state.error}`);\n        if (this.state.header) return (\n          <div>\n              <p>{this.state.header.invalid_domains.length > 0 ? `Invalid Domains: ${this.state.header.invalid_domains.join(\", \")}` : null}<br></br></p>\n              <textarea rows={(this.state.header.header.match(/\\n/g) || '').length + 5} cols={80} readOnly={true} value={this.state.header.header}></textarea>\n          </div>  \n        );\n        return CertificateData.msgDiv(\"Please add some domains, and click submit!\");\n    }\n}","import React, { SyntheticEvent } from 'react';\nimport InputFields from './InputFields';\nimport CertificateData from './CertificateData';\nimport './App.css';\n\nexport interface ISSLHelperOut {\n  header: string;\n  valid_domains: string[];\n  invalid_domains: string[];\n}\n\nexport interface ISSLHelperOpts {\n  array_name?: string;\n  length_name?: string;\n  guard_name?: string;\n}\n\ninterface IAppState {\n  domain_input: {\n    domain: string;\n  };\n  valid_domains: string[];\n  options: ISSLHelperOpts;\n  submit_count: number;\n}\n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      domain_input: {\n        domain: \"www.google.com, www.amazon.com\",\n      },\n      valid_domains: [\"www.google.com\", \"www.amazon.com\"],\n      options: {\n        array_name: \"TAs\",\n        length_name: \"TAs_NUM\",\n        guard_name: \"CERTIFICATES\",\n      },\n      submit_count: 0,\n    };\n  }\n\n  private static validateDomain(domain: string): boolean {\n    const regex = /^((?:(?:(?:\\w[.\\-+]?)*)\\w)+)((?:(?:(?:\\w[.\\-+]?){0,62})\\w)+)\\.(\\w{2,6})$/;\n    return domain.length > 0 && domain.length <= 255 && !!regex.exec(domain);\n  }\n\n  private onSubmit(event: SyntheticEvent) {\n    this.setState((state) => { return { submit_count: state.submit_count + 1 } });\n    event.preventDefault();\n  }\n\n  private onOptionsChange(input: { [label: string]: string }) {\n    this.setState({ options: Object.assign({}, this.state.options, input) });\n  }\n\n  private onDomainChange(input: { [label: string]: string }) {\n    this.setState({\n      domain_input: input as { domain: string },\n      valid_domains: input.domain.split(\",\").map((s) => s.trim()).filter((d) => App.validateDomain(d)),\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.onSubmit.bind(this)}>\n          <InputFields inputs={this.state.domain_input as any} descriptions={[\"Domains To Include\"]} onChange={this.onDomainChange.bind(this)}></InputFields>\n          <InputFields legend=\"Header Customization Options\" inputs={this.state.options as any} descriptions={[\n            \"Name For Trust Anchor Array Varible\",\n            \"Name For Array Length Varible\",\n            \"Name For The Header Guard (Usually Caps)\",\n          ]} onChange={this.onOptionsChange.bind(this)}></InputFields>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <p>{`Domains: ${this.state.valid_domains.join(\", \")}`}</p>\n        <CertificateData click_index={this.state.submit_count} domains={this.state.valid_domains} options={this.state.options}></CertificateData>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}